name: ci

on:
  push:
    branches:
      - 'main'

#on: [push, pull_request]

jobs:
  build_job:
    # The host should always be linux
    runs-on: ubuntu-22.04
    name: Build on ubuntu22.04 (aarch64)
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: aarch64
          distro: ubuntu22.04

          # Not required, but speeds up builds
          #githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -q -y
            apt-get install -q -y git gcc make proot build-essential pkgconf libtalloc-dev

          # Produce a binary artifact and place it in the mounted volume
          run: |
            git clone https://github.com/proot-me/proot
            cd proot
            make -C src loader.elf loader-m32.elf build.h
            make -C src proot care
            make -C test
            touch proot.tar.gz
            tar -czvf proot.tar.gz --exclude=proot.tar.gz .
            cp proot.tar.gz "/artifacts/${artifact_name}"
            echo "Produced artifact at /artifacts/${artifact_name}"

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"
      - uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: artifacts
