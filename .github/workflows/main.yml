name: ci

on:
  push:
    branches:
      - 'handbrake-cli-x86-64'

#on: [push, pull_request]

jobs:
  build_job:
    # The host should always be linux
    runs-on: ubuntu-22.04
    name: Build on ubuntu20.04 (x86-64)
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          #arch: aarch64
          #distro: ubuntu20.04
          arch: none
          distro: none
          base_image: ubuntu:20.04

          # Not required, but speeds up builds
          #githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: handbrake-cli-x86-64

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -q -y
            apt-get install libfdk-aac-dev -y
            apt-get install -q -y autoconf automake autopoint appstream build-essential cmake git libass-dev libbz2-dev libfontconfig1-dev libfreetype6-dev libfribidi-dev libharfbuzz-dev libjansson-dev liblzma-dev libmp3lame-dev libnuma-dev libogg-dev libopus-dev libsamplerate-dev libspeex-dev libtheora-dev libtool libtool-bin libturbojpeg0-dev libvorbis-dev libx264-dev libxml2-dev libvpx-dev m4 make meson nasm ninja-build patch pkg-config tar zlib1g-dev clang

          # Produce a binary artifact and place it in the mounted volume
          run: |
            git clone https://github.com/HandBrake/HandBrake.git
            cd HandBrake
            apt autoremove -y
            git tag --list | grep ^1\.6\.
            git checkout refs/tags/$(git tag -l | grep -E '^1\.6\.[0-9]+$' | tail -n 1)

            ./configure --launch-jobs=$(nproc) --launch --disable-gtk --enable-fdk --enable-x265
            cp build/* /artifacts/
            echo "Copied to /artifacts"

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"
      - uses: actions/upload-artifact@v3
        with:
          name: proot
          path: artifacts
